// src/models/resume.ts
import { z as z21 } from "zod";

// src/models/bio/bio.ts
import { z as z8 } from "zod";

// src/models/bio/skill.ts
import { z } from "zod";
var baseFormalSkillSchema = z.object({
  name: z.string().describe("the name of the skill"),
  id: z.optional(z.string()).describe(
    "an identifier for the skill; In implementations, this can be used as a key to find the logo for the skill."
  )
});
var formalSkillSchema = baseFormalSkillSchema.extend({
  subSkills: z.optional(z.lazy(() => z.array(skillSchema))).describe("a list of skills that are considered as sub-parts of this one")
});
var skillSchema = z.union([
  z.string().describe(
    "the name of the skill; This form should be used when an ID and sub-skills are not provided."
  ),
  formalSkillSchema.describe(
    "a combination of the skill name, an ID and sub-skills; This form should be used when an ID or sub-skills are provided."
  )
]).describe("a skill and optional sub-skills possessed by a person");

// src/models/bio/profile.ts
import { z as z4 } from "zod";

// src/models/bio/site.ts
import { z as z2 } from "zod";
var siteSchema = z2.object({
  id: z2.optional(z2.string()).describe(
    "a slug for the site; In implementations, this can be used as a key to find the icon for the site."
  ),
  name: z2.string().describe(
    "the readable name of the site, as it should be displayed to users; This should follow the site's preferred punctuation and capitalization."
  )
}).describe(
  "a web platform on which a person can have a profile; This can be a professional website or social network."
);

// src/models/base/url.ts
import { z as z3 } from "zod";
var urlSchema = z3.union([
  z3.string().url().describe(
    "the URL endpoint; This form should be used when a label is not provided."
  ),
  z3.object({
    dest: z3.string().url().describe("the URL endpoint"),
    label: z3.string().describe(
      "a label for the URL; This makes the URL accessible and provides more info about the destination."
    )
  }).describe(
    "a combination of the URL endpoint and a label for a11y purposes; This form should be used when a label is provided."
  )
]).describe("a URL endpoint and an optional label for a11y purposes");

// src/models/bio/profile.ts
var profileSchema = z4.object({
  site: siteSchema.describe("the website on which the profile is located"),
  username: z4.optional(z4.string()).describe("the username or handle of the person on the website"),
  url: urlSchema.describe(
    "the URL to the profile of the person on the website"
  )
}).describe("a person's profile on a website");

// src/models/base/contact.ts
import { z as z6 } from "zod";

// src/models/base/phone.ts
import { z as z5 } from "zod";
var phoneSchema = z5.object({
  countryCode: z5.number().int().describe(
    "the country calling code for the phone number, without any leading '+' or zeroes; In implementations, the country code may be used as the key to look up the country name."
  ),
  number: z5.string().describe(
    "the phone number itself, in the preferred format; This can include hyphens, parentheses and space."
  )
}).describe("a telephone number that can be used to reach the entity");

// src/models/base/contact.ts
var contactSchema = z6.object({
  emails: z6.optional(z6.array(z6.string().email())).describe("a list of email addresses"),
  phones: z6.optional(z6.array(phoneSchema)).describe("a list of phone numbers")
}).describe("a collection of ways to contact a given entity");

// src/models/base/address.ts
import { z as z7 } from "zod";
var addressSchema = z7.object({
  countryCode: z7.string().length(2).describe(
    "the ISO 3166-1 Alpha-2 code for the country in which the address is located"
  ),
  city: z7.optional(z7.string()).describe("the city in which the address is located"),
  state: z7.optional(z7.string()).describe(
    "the state or province in which the address is located; Some implementations would prefer a 2-letter abbreviation of the state."
  ),
  postalCode: z7.optional(z7.number()).describe(
    "the PIN/ZIP code, at which the location can receive mail; This can also be a postbox that is disconnected from the geographical location."
  )
}).describe(
  "a physical geographical location; This field can optionally include mailing information."
);

// src/models/bio/bio.ts
var bioSchema = z8.object({
  name: z8.string().describe(
    "the nickname or preferred name of the person; This should be the name used for most intents and purposes."
  ),
  fullName: z8.optional(z8.string()).describe(
    "the full name of the person; The person may not want to disclose this for privacy reasons."
  ),
  aliases: z8.optional(z8.array(z8.string())).describe(
    "a list of other names that the person goes by; This can be a nickname, a pseudonym, or the name in a different language."
  ),
  image: z8.optional(z8.string().url()).describe(
    "the URL to a profile picture for the person; For example, this can be a Gravatar link, or the URL to an image hosted on a public URL."
  ),
  labels: z8.optional(z8.array(z8.string())).describe("a few short labels describing the person"),
  summary: z8.optional(z8.string()).describe("a fairly brief summary of the person"),
  introduction: z8.optional(z8.string()).describe("a fairly long introduction about the person"),
  description: z8.optional(z8.string()).describe("a detailed description of the person"),
  contact: z8.optional(contactSchema).describe("the contact information to reach the person"),
  profiles: z8.optional(z8.array(profileSchema)).describe("a list of web profiles for the person"),
  skills: z8.optional(z8.array(skillSchema)).describe("a list of skills that the person has"),
  residence: z8.optional(addressSchema).describe("current location where the person resides"),
  origin: z8.optional(addressSchema).describe("location where the person comes from or holds citizenship of")
}).describe("information related to the identity of a person");

// src/models/work/org.ts
import { z as z15 } from "zod";

// src/models/work/role.ts
import { z as z14 } from "zod";

// src/models/base/period.ts
import { z as z10 } from "zod";

// src/models/base/date.ts
import { z as z9 } from "zod";
var yearSchema = z9.number().int().min(1).describe("a year in the Gregorian calendar");
var monthSchema = z9.number().int().min(1).max(12).describe("a month in the Gregorian calendar");
var daySchema = z9.number().int().min(1).max(31).describe("a day of the month in the Gregorian calendar");
function validateDate(day, month, year) {
  if ([4, 6, 9, 11].includes(month) && day > 30) return false;
  const isLeapYear = (year2) => year2 % 4 == 0 && year2 % 100 != 0 || year2 % 400 == 0;
  const febLimit = year && !isLeapYear(year) ? 28 : 29;
  if (month === 2 && day > febLimit) return false;
  return true;
}
var dateSchema = z9.union([
  z9.object({
    year: yearSchema,
    month: monthSchema,
    day: daySchema
  }).refine(({ year, month, day }) => validateDate(day, month, year)).describe("a fully-specified date in the Gregorian calendar"),
  z9.tuple([yearSchema]).describe("a date consisting only of a year"),
  z9.tuple([yearSchema, monthSchema]).describe("a date conisisting of a year and a month"),
  z9.tuple([yearSchema, monthSchema, daySchema]).refine(([year, month, day]) => validateDate(day, month, year)).describe("a date consisting of a year, a month and a day of the month")
]).describe(
  "a combination of year, month and day; This date can optionally skip the day and month fields, as needed."
);

// src/models/base/period.ts
var periodSchema = z10.object({
  start: dateSchema.describe("the start date of the period"),
  end: z10.optional(dateSchema).describe(
    "the end date of a period; If omitted, the period is considered active in the present."
  )
}).describe(
  "a duration of time between a start and end date; For active periods, the end date can be omitted."
);

// src/models/work/role_location.ts
import { z as z11 } from "zod";
var ROLE_LOCATIONS = ["remote", "onsite", "hybrid"];
var roleLocationSchema = z11.enum(ROLE_LOCATIONS);

// src/models/work/role_type.ts
import { z as z12 } from "zod";
var ROLE_TYPE = [
  "full-time",
  "part-time",
  "contract",
  "internship",
  "freelance",
  "foss",
  "volunteer",
  "temp",
  "other"
];
var roleTypeSchema = z12.enum(ROLE_TYPE);

// src/models/base/tag.ts
import { z as z13 } from "zod";
var tagSchema = z13.string().describe("a string that classifies a given entity");

// src/models/work/role.ts
var roleSchema = z14.object({
  id: z14.optional(z14.string()).describe("an identifier for the role"),
  name: z14.string().describe("the job title of the role"),
  summary: z14.optional(z14.string()).describe("a short description or introduction of the role"),
  description: z14.optional(z14.string()).describe(
    "long-form description of the role; This is used where space is not constrained."
  ),
  highlights: z14.optional(z14.array(z14.string())).describe(
    "a list of highlights, like responsibilities or achievements, from the role"
  ),
  type: z14.optional(roleTypeSchema).describe(
    "the nature of the role, in terms of length, commitment and obligations"
  ),
  location: z14.optional(roleLocationSchema).describe("the nature of the role, in terms of place of work"),
  period: z14.optional(periodSchema).describe("the time duration for which the role was held"),
  epicIds: z14.optional(z14.array(z14.string())).describe(
    "the list of IDs for epics that were created or worked on during this role; This is a relationship to the `Epic` model."
  ),
  tags: z14.optional(z14.array(tagSchema)).describe(
    "tags to apply to this role; The use of tags is left up to the application (for example, the portfolio uses tags for PDF r\xE9sum\xE9s)."
  )
}).describe("an experience of working in a role at an organisation");

// src/models/work/org.ts
var orgSchema = z15.object({
  id: z15.optional(z15.string()).describe(
    "an identifier for the organisation; In implementations, this can be used as a key to find the logo for the organisation."
  ),
  name: z15.string().describe("the name of the organisation"),
  shortName: z15.optional(z15.string()).describe(
    "a short informal name for the organisation; This can be an abbreviation like 'CC' instead of 'Creative Commons', for example."
  ),
  summary: z15.optional(z15.string()).describe(
    "a short description or introduction of the organisation; This is used where space is limited such as a r\xE9sum\xE9."
  ),
  description: z15.optional(z15.string()).describe(
    "long-form description of the organisation; This is used where space is not constrained."
  ),
  url: z15.optional(urlSchema).describe(
    "the public facing URL to access the organisation website; This should be a place where more information about the organisation can be found."
  ),
  address: z15.optional(addressSchema).describe(
    "the physical location of the organisation; This can be a workplace or the location where the organisation is registered to receive communications."
  ),
  contact: z15.optional(contactSchema).describe("the contact information to reach the organisation"),
  roles: z15.optional(z15.array(roleSchema)).describe("a list of roles that are part of this organisation")
}).describe(
  "a company or institution that the user has worked for; The user can serve for one or more roles at an organisation."
);

// src/models/creations/epic.ts
import { z as z18 } from "zod";

// src/models/creations/project.ts
import { z as z17 } from "zod";

// src/models/creations/tech.ts
import { z as z16 } from "zod";
var techSchema = z16.object({
  id: z16.optional(z16.string()).describe("an identifier for the technology"),
  name: z16.string().describe("the name of the technology"),
  shortName: z16.optional(z16.string()).describe("a short informal name for the technology"),
  url: z16.optional(urlSchema).describe("the URL to the website or documentation for the technology")
}).describe(
  "a programming language, tool or framework used in the creation of a project"
);

// src/models/creations/project.ts
var projectSchema = z17.object({
  id: z17.optional(z17.string()).describe("an identifier for the project"),
  name: z17.string().describe("the name of the project"),
  url: z17.optional(urlSchema).describe("the public facing URL to access this project"),
  summary: z17.optional(z17.string()).describe("a short description or introduction of the project"),
  description: z17.optional(z17.string()).describe(
    "long-form description of the project; This is used where space is not constrained."
  ),
  highlights: z17.optional(z17.array(z17.string())).describe(
    "a list of highlights, like noteworthy or salient features, from the project"
  ),
  role: z17.optional(z17.string()).describe("the role of the user in this project"),
  technologies: z17.optional(z17.array(techSchema)).describe("a list of technologies used in this project"),
  period: z17.optional(periodSchema).describe("the period over which the project was built or maintained"),
  tags: z17.optional(z17.array(tagSchema)).describe(
    "tags to apply to this project; The use of tags is left up to the application (for example, the portfolio uses tags for PDF r\xE9sum\xE9s)."
  )
}).describe("a creative endeavour undertaken as a part of a larger epic");

// src/models/creations/epic.ts
var epicSchema = z18.object({
  id: z18.optional(z18.string()).describe(
    "an identifier for the epic; In implementations, this can be used as a key to find the logo for the epic."
  ),
  name: z18.string().describe("the name of the epic"),
  url: z18.optional(urlSchema).describe(
    "the public facing URL to access this epic homepage; This should be a place where more information about the epic can be found."
  ),
  summary: z18.optional(z18.string()).describe(
    "a short description or introduction of the epic; This is used where space is limited such as a r\xE9sum\xE9."
  ),
  description: z18.optional(z18.string()).describe(
    "long-form description of the epic; This is used where space is not constrained."
  ),
  projects: z18.optional(z18.array(projectSchema)).describe("a list of projects that are part of this epic")
}).describe(
  "a large creative endeavour that the user has undertaken; The user can work on one or more projects as a part of an epic."
);

// src/models/education/institute.ts
import { z as z20 } from "zod";

// src/models/education/cert.ts
import { z as z19 } from "zod";
var certSchema = z19.object({
  id: z19.optional(z19.string()).describe("an identifier for the certificate"),
  name: z19.string().describe("the name of the certificate"),
  field: z19.optional(z19.string()).describe("the field of study in which the certificate was obtained"),
  period: periodSchema.describe("the period of study for the certificate"),
  issue: dateSchema.describe("the date on which the certificate was issued"),
  shortName: z19.optional(z19.string()).describe(
    "a short informal name for the certificate. This can be an abbreviation."
  ),
  score: z19.optional(z19.string()).describe(
    'the score achieved in the certificate examination; This is the overall score (cumulative) for the complete certificate. E.g., "86", "3.9" or "B-".'
  ),
  maxScore: z19.optional(z19.string()).describe(
    'the maximum attainable score in the certificate examination; E.g., "100", "4.0" or "A+".'
  ),
  courses: z19.optional(z19.array(z19.string())).describe(
    'a list of courses completed to obtain the certificate; E.g., "CS50 - Introduction to Computer Science"'
  ),
  expiration: z19.optional(dateSchema).describe(
    "the date on which the certificate is set to become invalid; This is to be left blank if the certificate does not expire."
  ),
  tags: z19.optional(z19.array(tagSchema)).describe(
    "tags to apply to this certificate; The use of tags is left up to the application (for example, the portfolio uses tags for PDF r\xE9sum\xE9s)."
  )
}).describe(
  "a document that proves successful completion of a course of education or training"
);

// src/models/education/institute.ts
var instituteSchema = z20.object({
  id: z20.optional(z20.string()).describe(
    "an identifier for the institute; In implementations, this can be used as a key to find the logo for the institute."
  ),
  name: z20.string().describe("the name of the institute"),
  shortName: z20.optional(z20.string()).describe(
    "a short informal name for the institute; This can be an abbreviation."
  ),
  url: z20.optional(urlSchema).describe(
    "the public facing URL to access the institute website; This should be a place where more information about the institute can be found."
  ),
  address: z20.optional(addressSchema).describe(
    "the physical location of the institute; This can be a campus or the location where the institute is registered to receive communications."
  ),
  contact: z20.optional(contactSchema).describe("the contact information to reach the institute"),
  certs: z20.optional(z20.array(certSchema)).describe("a list of certifications earned at the institute")
}).describe(
  "an organisation that imparts education or training, and offers certifications to corroborate the same; The user can acquire one or more certifications from an institute."
);

// src/models/resume.ts
var resumeSchema = z21.object({
  $schema: z21.optional(z21.string().url()).default("https://recivi.pages.dev/schemas/recivi-resume.json").describe(
    "the URL to the JSON schema that should be used to validate this document"
  ),
  bio: bioSchema,
  creations: z21.optional(z21.array(epicSchema)).describe(
    "the creations of a person, which consists of projects under various epics"
  ),
  education: z21.optional(z21.array(instituteSchema)).describe(
    "the education of a person, which consists of certifications from various insitutes"
  ),
  work: z21.optional(z21.array(orgSchema)).describe(
    "the work experience of a person, which consists of positions of responsibility in various organisations"
  )
});

// src/models/base/coords.ts
import { z as z22 } from "zod";
var coordsSchema = z22.union([
  z22.object({
    lat: z22.union([
      z22.literal(90).describe("the North pole"),
      z22.literal(-90).describe("the South pole")
    ]),
    long: z22.undefined().describe("longitude must be undefined at the poles")
  }).describe("a point at the North or South pole"),
  z22.object({
    lat: z22.number().gt(-90).lt(90).describe(
      "a measure of distance North (positive) or South (negative) of the Equator (zero degrees)"
    ),
    long: z22.number().gt(-180).lte(180).describe(
      "a measure of distance East (positive) or West (negative) of the Prime Meridian (zero degrees)"
    )
  }).describe("a non-polar point on the globe")
]).describe("a pair of numbers that uniquely identify a point on the globe");
export {
  addressSchema,
  bioSchema,
  certSchema,
  contactSchema,
  coordsSchema,
  dateSchema,
  daySchema,
  epicSchema,
  instituteSchema,
  monthSchema,
  orgSchema,
  periodSchema,
  phoneSchema,
  profileSchema,
  projectSchema,
  resumeSchema,
  roleLocationSchema,
  roleSchema,
  roleTypeSchema,
  siteSchema,
  skillSchema,
  tagSchema,
  techSchema,
  urlSchema,
  yearSchema
};
