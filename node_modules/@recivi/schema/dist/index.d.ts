import { z } from 'zod';

interface FormalSkill {
    name: string;
    id?: string;
    subSkills?: Skill[];
}
declare const skillSchema: z.ZodUnion<[z.ZodString, z.ZodType<FormalSkill, z.ZodTypeDef, FormalSkill>]>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "name": "JavaScript",
 *   "subSkills": [
 *     "Vue.js",
 *     {
 *       "name": "React",
 *       "subSkills": [
 *         "Next.js"
 *       ]
 *     }
 *   ]
 * }
 * ```
 *
 * ---
 *
 * ```json
 * "Woodworking"
 * ```
 */
type Skill = z.infer<typeof skillSchema>;

declare const siteSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
}, {
    name: string;
    id?: string | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "id": "github",
 *   "name": "GitHub",
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "name": "Personal"
 * }
 * ```
 */
type Site = z.infer<typeof siteSchema>;

declare const urlSchema: z.ZodUnion<[z.ZodString, z.ZodObject<{
    dest: z.ZodString;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    dest: string;
    label: string;
}, {
    dest: string;
    label: string;
}>]>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "dest": "https://dhruvkb.dev",
 *   "label": "My website"
 * }
 * ```
 *
 * ---
 *
 * ```json
 * "https://dhruvkb.dev"
 * ```
 */
type Url = z.infer<typeof urlSchema>;

declare const profileSchema: z.ZodObject<{
    site: z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
    }, {
        name: string;
        id?: string | undefined;
    }>;
    username: z.ZodOptional<z.ZodString>;
    url: z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    site: {
        name: string;
        id?: string | undefined;
    };
    url: string | {
        dest: string;
        label: string;
    };
    username?: string | undefined;
}, {
    site: {
        name: string;
        id?: string | undefined;
    };
    url: string | {
        dest: string;
        label: string;
    };
    username?: string | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "site": {
 *     "name": "Personal"
 *   },
 *   "url": "https://dhruvkb.dev"
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "site": {
 *     "id": "bluesky",
 *     "name": "Bluesky",
 *   },
 *   "username": "dhruvkb.dev",
 *   "url": "https://bsky.app/profile/dhruvkb.dev"
 * }
 * ```
 */
type Profile = Omit<z.infer<typeof profileSchema>, 'site' | 'url'> & {
    site: Site;
    url: Url;
};

declare const phoneSchema: z.ZodObject<{
    countryCode: z.ZodNumber;
    number: z.ZodString;
}, "strip", z.ZodTypeAny, {
    number: string;
    countryCode: number;
}, {
    number: string;
    countryCode: number;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "countryCode": 91,
 *   "number": "9876543210"
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "countryCode": 1,
 *   "number": "(877) 273-3049"
 * }
 * ```
 */
type Phone = z.infer<typeof phoneSchema>;

declare const contactSchema: z.ZodObject<{
    emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
        countryCode: z.ZodNumber;
        number: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        number: string;
        countryCode: number;
    }, {
        number: string;
        countryCode: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    emails?: string[] | undefined;
    phones?: {
        number: string;
        countryCode: number;
    }[] | undefined;
}, {
    emails?: string[] | undefined;
    phones?: {
        number: string;
        countryCode: number;
    }[] | undefined;
}>;
type Contact = Omit<z.infer<typeof contactSchema>, 'phone'> & Partial<{
    phone: Phone;
}>;

declare const addressSchema: z.ZodObject<{
    countryCode: z.ZodString;
    city: z.ZodOptional<z.ZodString>;
    state: z.ZodOptional<z.ZodString>;
    postalCode: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    countryCode: string;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number | undefined;
}, {
    countryCode: string;
    city?: string | undefined;
    state?: string | undefined;
    postalCode?: number | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "city": "Roorkee",
 *   "state": "UK",
 *   "countryCode": "IN",
 *   "postalCode": 247667
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "countryCode": "IN"
 * }
 * ```
 */
type Address = z.infer<typeof addressSchema>;

declare const bioSchema: z.ZodObject<{
    name: z.ZodString;
    fullName: z.ZodOptional<z.ZodString>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    image: z.ZodOptional<z.ZodString>;
    labels: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    summary: z.ZodOptional<z.ZodString>;
    introduction: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    contact: z.ZodOptional<z.ZodObject<{
        emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
            countryCode: z.ZodNumber;
            number: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: string;
            countryCode: number;
        }, {
            number: string;
            countryCode: number;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }>>;
    profiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        site: z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id?: string | undefined;
        }, {
            name: string;
            id?: string | undefined;
        }>;
        username: z.ZodOptional<z.ZodString>;
        url: z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        site: {
            name: string;
            id?: string | undefined;
        };
        url: string | {
            dest: string;
            label: string;
        };
        username?: string | undefined;
    }, {
        site: {
            name: string;
            id?: string | undefined;
        };
        url: string | {
            dest: string;
            label: string;
        };
        username?: string | undefined;
    }>, "many">>;
    skills: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<FormalSkill, z.ZodTypeDef, FormalSkill>]>, "many">>;
    residence: z.ZodOptional<z.ZodObject<{
        countryCode: z.ZodString;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        postalCode: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }>>;
    origin: z.ZodOptional<z.ZodObject<{
        countryCode: z.ZodString;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        postalCode: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    fullName?: string | undefined;
    aliases?: string[] | undefined;
    image?: string | undefined;
    labels?: string[] | undefined;
    summary?: string | undefined;
    introduction?: string | undefined;
    description?: string | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    profiles?: {
        site: {
            name: string;
            id?: string | undefined;
        };
        url: string | {
            dest: string;
            label: string;
        };
        username?: string | undefined;
    }[] | undefined;
    skills?: (string | FormalSkill)[] | undefined;
    residence?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    origin?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
}, {
    name: string;
    fullName?: string | undefined;
    aliases?: string[] | undefined;
    image?: string | undefined;
    labels?: string[] | undefined;
    summary?: string | undefined;
    introduction?: string | undefined;
    description?: string | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    profiles?: {
        site: {
            name: string;
            id?: string | undefined;
        };
        url: string | {
            dest: string;
            label: string;
        };
        username?: string | undefined;
    }[] | undefined;
    skills?: (string | FormalSkill)[] | undefined;
    residence?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    origin?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
}>;
type Bio = Omit<z.infer<typeof bioSchema>, 'contact' | 'profiles' | 'skills' | 'residence' | 'origin'> & Partial<{
    contact: Contact;
    profiles: Profile[];
    skills: Skill[];
    residence: Address;
    origin: Address;
}>;

declare const yearSchema: z.ZodNumber;
declare const monthSchema: z.ZodNumber;
declare const daySchema: z.ZodNumber;
declare const dateSchema: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
    year: z.ZodNumber;
    month: z.ZodNumber;
    day: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    year: number;
    month: number;
    day: number;
}, {
    year: number;
    month: number;
    day: number;
}>, {
    year: number;
    month: number;
    day: number;
}, {
    year: number;
    month: number;
    day: number;
}>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
/**
 * Examples: Refer to tests.
 */
type Date = z.infer<typeof dateSchema>;

declare const periodSchema: z.ZodObject<{
    start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        year: z.ZodNumber;
        month: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
    end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        year: z.ZodNumber;
        month: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
}, "strip", z.ZodTypeAny, {
    start: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number];
    end?: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number] | undefined;
}, {
    start: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number];
    end?: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number] | undefined;
}>;
type Period = Omit<z.infer<typeof periodSchema>, 'start' | 'end'> & {
    start: Date;
    end?: Date;
};

declare const roleLocationSchema: z.ZodEnum<["remote", "onsite", "hybrid"]>;
type RoleLocation = z.infer<typeof roleLocationSchema>;

declare const roleTypeSchema: z.ZodEnum<["full-time", "part-time", "contract", "internship", "freelance", "foss", "volunteer", "temp", "other"]>;
type RoleType = z.infer<typeof roleTypeSchema>;

declare const tagSchema: z.ZodString;
type Tag = z.infer<typeof tagSchema>;

declare const roleSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    type: z.ZodOptional<z.ZodEnum<["full-time", "part-time", "contract", "internship", "freelance", "foss", "volunteer", "temp", "other"]>>;
    location: z.ZodOptional<z.ZodEnum<["remote", "onsite", "hybrid"]>>;
    period: z.ZodOptional<z.ZodObject<{
        start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
    }, "strip", z.ZodTypeAny, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }>>;
    epicIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
    id?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    highlights?: string[] | undefined;
    location?: "remote" | "onsite" | "hybrid" | undefined;
    period?: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    } | undefined;
    epicIds?: string[] | undefined;
    tags?: string[] | undefined;
}, {
    name: string;
    type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
    id?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    highlights?: string[] | undefined;
    location?: "remote" | "onsite" | "hybrid" | undefined;
    period?: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    } | undefined;
    epicIds?: string[] | undefined;
    tags?: string[] | undefined;
}>;
type Role = Omit<z.infer<typeof roleSchema>, 'tags'> & Partial<{
    type: RoleType;
    location: RoleLocation;
    period: Period;
    tags: Tag[];
}>;

declare const orgSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    shortName: z.ZodOptional<z.ZodString>;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>>;
    address: z.ZodOptional<z.ZodObject<{
        countryCode: z.ZodString;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        postalCode: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }>>;
    contact: z.ZodOptional<z.ZodObject<{
        emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
            countryCode: z.ZodNumber;
            number: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: string;
            countryCode: number;
        }, {
            number: string;
            countryCode: number;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }>>;
    roles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        type: z.ZodOptional<z.ZodEnum<["full-time", "part-time", "contract", "internship", "freelance", "foss", "volunteer", "temp", "other"]>>;
        location: z.ZodOptional<z.ZodEnum<["remote", "onsite", "hybrid"]>>;
        period: z.ZodOptional<z.ZodObject<{
            start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
        }, "strip", z.ZodTypeAny, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }>>;
        epicIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
        id?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        location?: "remote" | "onsite" | "hybrid" | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        epicIds?: string[] | undefined;
        tags?: string[] | undefined;
    }, {
        name: string;
        type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
        id?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        location?: "remote" | "onsite" | "hybrid" | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        epicIds?: string[] | undefined;
        tags?: string[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    shortName?: string | undefined;
    address?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    roles?: {
        name: string;
        type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
        id?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        location?: "remote" | "onsite" | "hybrid" | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        epicIds?: string[] | undefined;
        tags?: string[] | undefined;
    }[] | undefined;
}, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    shortName?: string | undefined;
    address?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    roles?: {
        name: string;
        type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
        id?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        location?: "remote" | "onsite" | "hybrid" | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        epicIds?: string[] | undefined;
        tags?: string[] | undefined;
    }[] | undefined;
}>;
type Org = Omit<z.infer<typeof orgSchema>, 'url' | 'address' | 'contact' | 'roles'> & Partial<{
    url: Url;
    address: Address;
    contact: Contact;
    roles: Role[];
}>;

declare const techSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    shortName: z.ZodOptional<z.ZodString>;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    shortName?: string | undefined;
}, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    shortName?: string | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "id": "react",
 *   "name": "React",
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "id": "typescript",
 *   "name": "TypeScript",
 *   "shortName": "TS"
 * }
 * ```
 *
 * ---
 *
 * ```json
 * {
 *   "id": "recivi",
 *   "name": "Récivi",
 *   "url": {
 *     "dest": "https://recivi.vercel.app",
 *     "label": "Récivi homepage"
 *   }
 * }
 * ```
 */
type Tech = Omit<z.infer<typeof techSchema>, 'url'> & Partial<{
    url: Url;
}>;

declare const projectSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>>;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    role: z.ZodOptional<z.ZodString>;
    technologies: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        shortName: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        shortName?: string | undefined;
    }, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        shortName?: string | undefined;
    }>, "many">>;
    period: z.ZodOptional<z.ZodObject<{
        start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
    }, "strip", z.ZodTypeAny, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }>>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    highlights?: string[] | undefined;
    period?: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    } | undefined;
    tags?: string[] | undefined;
    role?: string | undefined;
    technologies?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        shortName?: string | undefined;
    }[] | undefined;
}, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    highlights?: string[] | undefined;
    period?: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    } | undefined;
    tags?: string[] | undefined;
    role?: string | undefined;
    technologies?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        shortName?: string | undefined;
    }[] | undefined;
}>;
type Project = Omit<z.infer<typeof projectSchema>, 'url' | 'technologies' | 'period' | 'tags'> & Partial<{
    url: Url;
    technologies: Tech[];
    period: Period;
    tags: Tag[];
}>;

declare const epicSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>>;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    projects: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>>;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        role: z.ZodOptional<z.ZodString>;
        technologies: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            shortName: z.ZodOptional<z.ZodString>;
            url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                dest: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dest: string;
                label: string;
            }, {
                dest: string;
                label: string;
            }>]>>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }, {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }>, "many">>;
        period: z.ZodOptional<z.ZodObject<{
            start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
        }, "strip", z.ZodTypeAny, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }>>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        tags?: string[] | undefined;
        role?: string | undefined;
        technologies?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }[] | undefined;
    }, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        tags?: string[] | undefined;
        role?: string | undefined;
        technologies?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    projects?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        tags?: string[] | undefined;
        role?: string | undefined;
        technologies?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }[] | undefined;
    }[] | undefined;
}, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    projects?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        highlights?: string[] | undefined;
        period?: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        } | undefined;
        tags?: string[] | undefined;
        role?: string | undefined;
        technologies?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            shortName?: string | undefined;
        }[] | undefined;
    }[] | undefined;
}>;
type Epic = Omit<z.infer<typeof epicSchema>, 'projects' | 'url'> & Partial<{
    url: Url;
    projects: Project[];
}>;

declare const certSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    field: z.ZodOptional<z.ZodString>;
    period: z.ZodObject<{
        start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
        end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
    }, "strip", z.ZodTypeAny, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }, {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }>;
    issue: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        year: z.ZodNumber;
        month: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
    shortName: z.ZodOptional<z.ZodString>;
    score: z.ZodOptional<z.ZodString>;
    maxScore: z.ZodOptional<z.ZodString>;
    courses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    expiration: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        year: z.ZodNumber;
        month: z.ZodNumber;
        day: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, {
        year: number;
        month: number;
        day: number;
    }, {
        year: number;
        month: number;
        day: number;
    }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
    tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    period: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    };
    issue: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number];
    id?: string | undefined;
    tags?: string[] | undefined;
    shortName?: string | undefined;
    field?: string | undefined;
    score?: string | undefined;
    maxScore?: string | undefined;
    courses?: string[] | undefined;
    expiration?: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number] | undefined;
}, {
    name: string;
    period: {
        start: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        end?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    };
    issue: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number];
    id?: string | undefined;
    tags?: string[] | undefined;
    shortName?: string | undefined;
    field?: string | undefined;
    score?: string | undefined;
    maxScore?: string | undefined;
    courses?: string[] | undefined;
    expiration?: {
        year: number;
        month: number;
        day: number;
    } | [number] | [number, number] | [number, number, number] | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "id": "b_tech",
 *   "name": "Bachelor of Technology",
 *   "shortName": "B. Tech.",
 *   "field": "Engineering Physics",
 *   "period": {
 *     "start": [2015],
 *     "end": [2019]
 *   },
 *   "score": "7.286",
 *   "maxScore": "10.000",
 *   "courses": [
 *     "PH101 - Introduction to Physics",
 *   ]
 * }
 * ```
 */
type Cert = Omit<z.infer<typeof certSchema>, 'period' | 'issue' | 'expiration' | 'tags'> & {
    period: Period;
    issue: Date;
} & Partial<{
    expiration: Date;
    tags: Tag[];
}>;

declare const instituteSchema: z.ZodObject<{
    id: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    shortName: z.ZodOptional<z.ZodString>;
    url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        dest: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        dest: string;
        label: string;
    }, {
        dest: string;
        label: string;
    }>]>>;
    address: z.ZodOptional<z.ZodObject<{
        countryCode: z.ZodString;
        city: z.ZodOptional<z.ZodString>;
        state: z.ZodOptional<z.ZodString>;
        postalCode: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }, {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    }>>;
    contact: z.ZodOptional<z.ZodObject<{
        emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
            countryCode: z.ZodNumber;
            number: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            number: string;
            countryCode: number;
        }, {
            number: string;
            countryCode: number;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }, {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    }>>;
    certs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        field: z.ZodOptional<z.ZodString>;
        period: z.ZodObject<{
            start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
            end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
        }, "strip", z.ZodTypeAny, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }, {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }>;
        issue: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
        shortName: z.ZodOptional<z.ZodString>;
        score: z.ZodOptional<z.ZodString>;
        maxScore: z.ZodOptional<z.ZodString>;
        courses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        expiration: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
            year: z.ZodNumber;
            month: z.ZodNumber;
            day: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, {
            year: number;
            month: number;
            day: number;
        }, {
            year: number;
            month: number;
            day: number;
        }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
        tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        period: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        };
        issue: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        id?: string | undefined;
        tags?: string[] | undefined;
        shortName?: string | undefined;
        field?: string | undefined;
        score?: string | undefined;
        maxScore?: string | undefined;
        courses?: string[] | undefined;
        expiration?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }, {
        name: string;
        period: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        };
        issue: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        id?: string | undefined;
        tags?: string[] | undefined;
        shortName?: string | undefined;
        field?: string | undefined;
        score?: string | undefined;
        maxScore?: string | undefined;
        courses?: string[] | undefined;
        expiration?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    shortName?: string | undefined;
    address?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    certs?: {
        name: string;
        period: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        };
        issue: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        id?: string | undefined;
        tags?: string[] | undefined;
        shortName?: string | undefined;
        field?: string | undefined;
        score?: string | undefined;
        maxScore?: string | undefined;
        courses?: string[] | undefined;
        expiration?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }[] | undefined;
}, {
    name: string;
    id?: string | undefined;
    url?: string | {
        dest: string;
        label: string;
    } | undefined;
    contact?: {
        emails?: string[] | undefined;
        phones?: {
            number: string;
            countryCode: number;
        }[] | undefined;
    } | undefined;
    shortName?: string | undefined;
    address?: {
        countryCode: string;
        city?: string | undefined;
        state?: string | undefined;
        postalCode?: number | undefined;
    } | undefined;
    certs?: {
        name: string;
        period: {
            start: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            end?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        };
        issue: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number];
        id?: string | undefined;
        tags?: string[] | undefined;
        shortName?: string | undefined;
        field?: string | undefined;
        score?: string | undefined;
        maxScore?: string | undefined;
        courses?: string[] | undefined;
        expiration?: {
            year: number;
            month: number;
            day: number;
        } | [number] | [number, number] | [number, number, number] | undefined;
    }[] | undefined;
}>;
/**
 * Examples:
 *
 * ```json
 * {
 *   "id": "mit",
 *   "name": "Massachusetts Institute of Technology",
 *   "shortName": "MIT",
 *   "url": "https://web.mit.edu/",
 *   "address": {
 *      "city": "Cambridge",
 *      "state": "Massachusetts",
 *      "countryCode": "US",
 *      "postalCode": "02139"
 *   },
 * }
 * ```
 */
type Institute = Omit<z.infer<typeof instituteSchema>, 'url' | 'address' | 'contact' | 'certs'> & Partial<{
    url: Url;
    address: Address;
    contact: Contact;
    certs: Cert[];
}>;

declare const resumeSchema: z.ZodObject<{
    $schema: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    bio: z.ZodObject<{
        name: z.ZodString;
        fullName: z.ZodOptional<z.ZodString>;
        aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        image: z.ZodOptional<z.ZodString>;
        labels: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        summary: z.ZodOptional<z.ZodString>;
        introduction: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        contact: z.ZodOptional<z.ZodObject<{
            emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
                countryCode: z.ZodNumber;
                number: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                number: string;
                countryCode: number;
            }, {
                number: string;
                countryCode: number;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }>>;
        profiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            site: z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id?: string | undefined;
            }, {
                name: string;
                id?: string | undefined;
            }>;
            username: z.ZodOptional<z.ZodString>;
            url: z.ZodUnion<[z.ZodString, z.ZodObject<{
                dest: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dest: string;
                label: string;
            }, {
                dest: string;
                label: string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }, {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }>, "many">>;
        skills: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<FormalSkill, z.ZodTypeDef, FormalSkill>]>, "many">>;
        residence: z.ZodOptional<z.ZodObject<{
            countryCode: z.ZodString;
            city: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodString>;
            postalCode: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }>>;
        origin: z.ZodOptional<z.ZodObject<{
            countryCode: z.ZodString;
            city: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodString>;
            postalCode: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        fullName?: string | undefined;
        aliases?: string[] | undefined;
        image?: string | undefined;
        labels?: string[] | undefined;
        summary?: string | undefined;
        introduction?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        profiles?: {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }[] | undefined;
        skills?: (string | FormalSkill)[] | undefined;
        residence?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        origin?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
    }, {
        name: string;
        fullName?: string | undefined;
        aliases?: string[] | undefined;
        image?: string | undefined;
        labels?: string[] | undefined;
        summary?: string | undefined;
        introduction?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        profiles?: {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }[] | undefined;
        skills?: (string | FormalSkill)[] | undefined;
        residence?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        origin?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
    }>;
    creations: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>>;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        projects: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                dest: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                dest: string;
                label: string;
            }, {
                dest: string;
                label: string;
            }>]>>;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            role: z.ZodOptional<z.ZodString>;
            technologies: z.ZodOptional<z.ZodArray<z.ZodObject<{
                id: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                shortName: z.ZodOptional<z.ZodString>;
                url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
                    dest: z.ZodString;
                    label: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    dest: string;
                    label: string;
                }, {
                    dest: string;
                    label: string;
                }>]>>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }, {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }>, "many">>;
            period: z.ZodOptional<z.ZodObject<{
                start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
                end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }>>;
            tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }, {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        projects?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    }, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        projects?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    }>, "many">>;
    education: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        shortName: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>>;
        address: z.ZodOptional<z.ZodObject<{
            countryCode: z.ZodString;
            city: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodString>;
            postalCode: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }>>;
        contact: z.ZodOptional<z.ZodObject<{
            emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
                countryCode: z.ZodNumber;
                number: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                number: string;
                countryCode: number;
            }, {
                number: string;
                countryCode: number;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }>>;
        certs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            field: z.ZodOptional<z.ZodString>;
            period: z.ZodObject<{
                start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
                end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }>;
            issue: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
            shortName: z.ZodOptional<z.ZodString>;
            score: z.ZodOptional<z.ZodString>;
            maxScore: z.ZodOptional<z.ZodString>;
            courses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            expiration: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                year: z.ZodNumber;
                month: z.ZodNumber;
                day: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, {
                year: number;
                month: number;
                day: number;
            }, {
                year: number;
                month: number;
                day: number;
            }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
            tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }, {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        certs?: {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }[] | undefined;
    }, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        certs?: {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }[] | undefined;
    }>, "many">>;
    work: z.ZodOptional<z.ZodArray<z.ZodObject<{
        id: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        shortName: z.ZodOptional<z.ZodString>;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        url: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
            dest: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            dest: string;
            label: string;
        }, {
            dest: string;
            label: string;
        }>]>>;
        address: z.ZodOptional<z.ZodObject<{
            countryCode: z.ZodString;
            city: z.ZodOptional<z.ZodString>;
            state: z.ZodOptional<z.ZodString>;
            postalCode: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }, {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        }>>;
        contact: z.ZodOptional<z.ZodObject<{
            emails: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phones: z.ZodOptional<z.ZodArray<z.ZodObject<{
                countryCode: z.ZodNumber;
                number: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                number: string;
                countryCode: number;
            }, {
                number: string;
                countryCode: number;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }, {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        }>>;
        roles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            highlights: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            type: z.ZodOptional<z.ZodEnum<["full-time", "part-time", "contract", "internship", "freelance", "foss", "volunteer", "temp", "other"]>>;
            location: z.ZodOptional<z.ZodEnum<["remote", "onsite", "hybrid"]>>;
            period: z.ZodOptional<z.ZodObject<{
                start: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>;
                end: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodObject<{
                    year: z.ZodNumber;
                    month: z.ZodNumber;
                    day: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, {
                    year: number;
                    month: number;
                    day: number;
                }, {
                    year: number;
                    month: number;
                    day: number;
                }>, z.ZodTuple<[z.ZodNumber], null>, z.ZodTuple<[z.ZodNumber, z.ZodNumber], null>, z.ZodEffects<z.ZodTuple<[z.ZodNumber, z.ZodNumber, z.ZodNumber], null>, [number, number, number], [number, number, number]>]>>;
            }, "strip", z.ZodTypeAny, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }, {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            }>>;
            epicIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }, {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        roles?: {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }[] | undefined;
    }, {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        roles?: {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    $schema: string;
    bio: {
        name: string;
        fullName?: string | undefined;
        aliases?: string[] | undefined;
        image?: string | undefined;
        labels?: string[] | undefined;
        summary?: string | undefined;
        introduction?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        profiles?: {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }[] | undefined;
        skills?: (string | FormalSkill)[] | undefined;
        residence?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        origin?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
    };
    creations?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        projects?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    }[] | undefined;
    education?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        certs?: {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }[] | undefined;
    }[] | undefined;
    work?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        roles?: {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }[] | undefined;
    }[] | undefined;
}, {
    bio: {
        name: string;
        fullName?: string | undefined;
        aliases?: string[] | undefined;
        image?: string | undefined;
        labels?: string[] | undefined;
        summary?: string | undefined;
        introduction?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        profiles?: {
            site: {
                name: string;
                id?: string | undefined;
            };
            url: string | {
                dest: string;
                label: string;
            };
            username?: string | undefined;
        }[] | undefined;
        skills?: (string | FormalSkill)[] | undefined;
        residence?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        origin?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
    };
    $schema?: string | undefined;
    creations?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        projects?: {
            name: string;
            id?: string | undefined;
            url?: string | {
                dest: string;
                label: string;
            } | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            tags?: string[] | undefined;
            role?: string | undefined;
            technologies?: {
                name: string;
                id?: string | undefined;
                url?: string | {
                    dest: string;
                    label: string;
                } | undefined;
                shortName?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    }[] | undefined;
    education?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        certs?: {
            name: string;
            period: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            };
            issue: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number];
            id?: string | undefined;
            tags?: string[] | undefined;
            shortName?: string | undefined;
            field?: string | undefined;
            score?: string | undefined;
            maxScore?: string | undefined;
            courses?: string[] | undefined;
            expiration?: {
                year: number;
                month: number;
                day: number;
            } | [number] | [number, number] | [number, number, number] | undefined;
        }[] | undefined;
    }[] | undefined;
    work?: {
        name: string;
        id?: string | undefined;
        url?: string | {
            dest: string;
            label: string;
        } | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        contact?: {
            emails?: string[] | undefined;
            phones?: {
                number: string;
                countryCode: number;
            }[] | undefined;
        } | undefined;
        shortName?: string | undefined;
        address?: {
            countryCode: string;
            city?: string | undefined;
            state?: string | undefined;
            postalCode?: number | undefined;
        } | undefined;
        roles?: {
            name: string;
            type?: "full-time" | "part-time" | "contract" | "internship" | "freelance" | "foss" | "volunteer" | "temp" | "other" | undefined;
            id?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            highlights?: string[] | undefined;
            location?: "remote" | "onsite" | "hybrid" | undefined;
            period?: {
                start: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number];
                end?: {
                    year: number;
                    month: number;
                    day: number;
                } | [number] | [number, number] | [number, number, number] | undefined;
            } | undefined;
            epicIds?: string[] | undefined;
            tags?: string[] | undefined;
        }[] | undefined;
    }[] | undefined;
}>;
type Resume = Omit<z.infer<typeof resumeSchema>, 'bio' | 'creations' | 'education' | 'work'> & {
    bio: Bio;
    creations?: Epic[];
    education?: Institute[];
    work?: Org[];
};

declare const coordsSchema: z.ZodUnion<[z.ZodObject<{
    lat: z.ZodUnion<[z.ZodLiteral<90>, z.ZodLiteral<-90>]>;
    long: z.ZodUndefined;
}, "strip", z.ZodTypeAny, {
    lat: 90 | -90;
    long?: undefined;
}, {
    lat: 90 | -90;
    long?: undefined;
}>, z.ZodObject<{
    lat: z.ZodNumber;
    long: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    lat: number;
    long: number;
}, {
    lat: number;
    long: number;
}>]>;
/**
 * Examples: See tests.
 */
type Coords = z.infer<typeof coordsSchema>;

export { type Address, type Bio, type Cert, type Contact, type Coords, type Date, type Epic, type FormalSkill, type Institute, type Org, type Period, type Phone, type Profile, type Project, type Resume, type Role, type RoleLocation, type RoleType, type Site, type Skill, type Tag, type Tech, type Url, addressSchema, bioSchema, certSchema, contactSchema, coordsSchema, dateSchema, daySchema, epicSchema, instituteSchema, monthSchema, orgSchema, periodSchema, phoneSchema, profileSchema, projectSchema, resumeSchema, roleLocationSchema, roleSchema, roleTypeSchema, siteSchema, skillSchema, tagSchema, techSchema, urlSchema, yearSchema };
